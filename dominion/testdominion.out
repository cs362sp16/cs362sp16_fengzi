Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 2
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 12
No branches
No calls

Function 'initializeGame'
Lines executed:96.15% of 78
Branches executed:100.00% of 46
Taken at least once:91.30% of 46
No calls

Function 'shuffle'
Lines executed:94.44% of 18
Branches executed:100.00% of 8
Taken at least once:87.50% of 8
No calls

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'buyCard'
Lines executed:92.31% of 13
Branches executed:100.00% of 6
Taken at least once:83.33% of 6
No calls

Function 'numHandCards'
Lines executed:100.00% of 1
No branches
No calls

Function 'handCard'
Lines executed:100.00% of 2
No branches
No calls

Function 'supplyCount'
Lines executed:100.00% of 1
No branches
No calls

Function 'fullDeckCount'
Lines executed:100.00% of 11
Branches executed:100.00% of 12
Taken at least once:100.00% of 12
No calls

Function 'whoseTurn'
Lines executed:100.00% of 1
No branches
No calls

Function 'endTurn'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'isGameOver'
Lines executed:91.67% of 12
Branches executed:100.00% of 8
Taken at least once:87.50% of 8
No calls

Function 'scoreFor'
Lines executed:100.00% of 26
Branches executed:100.00% of 42
Taken at least once:100.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 33
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:95.83% of 24
Branches executed:100.00% of 6
Taken at least once:83.33% of 6
No calls

Function 'getCost'
Lines executed:96.67% of 30
Branches executed:100.00% of 28
Taken at least once:96.43% of 28
No calls

Function 'cardEffect'
Lines executed:0.00% of 246
Branches executed:0.00% of 173
Taken at least once:0.00% of 173
No calls

Function 'discardCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'gainCard'
Lines executed:53.33% of 15
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'updateCoins'
Lines executed:100.00% of 14
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'f_adventurer'
Lines executed:0.00% of 17
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'f_concil_room'
Lines executed:0.00% of 8
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'f_remodel'
Lines executed:0.00% of 12
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'f_smithy'
Lines executed:0.00% of 5
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
No calls

Function 'f_village'
Lines executed:0.00% of 4
No branches
No calls

File 'dominion.c'
Lines executed:40.34% of 642
Branches executed:43.17% of 417
Taken at least once:40.29% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:25
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 16026208 returned 100% blocks executed 100%
        -:    8:int compare(const void* a, const void* b) {
 16026208:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 37%
branch  1 taken 63%
  5876538:   10:    return 1;
 10149670:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 49%
branch  1 taken 51%
  4990936:   12:    return -1;
  5158734:   13:  return 0;
 16026208:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 2500 returned 100% blocks executed 95%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     2500:   44:  SelectStream(1);
     2500:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
     5000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     2500:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    55000:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:    {
   550000:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:        {
   475000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
   250000:   65:        }
    25000:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     2500:   73:  if (numPlayers == 2)
branch  0 taken 34%
branch  1 taken 66%
        -:   74:    {
      842:   75:      state->supplyCount[curse] = 10;
      842:   76:    }
     1658:   77:  else if (numPlayers == 3)
branch  0 taken 50%
branch  1 taken 50%
        -:   78:    {
      821:   79:      state->supplyCount[curse] = 20;
      821:   80:    }
        -:   81:  else
        -:   82:    {
      837:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     2500:   87:  if (numPlayers == 2)
branch  0 taken 34%
branch  1 taken 66%
        -:   88:    {
      842:   89:      state->supplyCount[estate] = 8;
      842:   90:      state->supplyCount[duchy] = 8;
      842:   91:      state->supplyCount[province] = 8;
      842:   92:    }
        -:   93:  else
        -:   94:    {
     1658:   95:      state->supplyCount[estate] = 12;
     1658:   96:      state->supplyCount[duchy] = 12;
     1658:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     2500:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     2500:  102:  state->supplyCount[silver] = 40;
     2500:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   105000:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:    {
   825000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  109:	{
   387500:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    48745:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 95%
branch  1 taken 5%
branch  2 taken 5%
branch  3 taken 95%
        -:  114:		{
     2486:  115:		  if (numPlayers == 2){ 
branch  0 taken 35%
branch  1 taken 65%
      870:  116:		    state->supplyCount[i] = 8; 
      870:  117:		  }
     1616:  118:		  else{ state->supplyCount[i] = 12; }
     2486:  119:		}
        -:  120:	      else
        -:  121:		{
    22514:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    25000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   362500:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
   362500:  130:	}
        -:  131:
    50000:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    19990:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25%
        -:  139:    {
     7495:  140:      state->deckCount[i] = 0;
    59960:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  142:	{
    22485:  143:	  state->deck[i][j] = estate;
    22485:  144:	  state->deckCount[i]++;
    22485:  145:	}
   119920:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  147:	{
    52465:  148:	  state->deck[i][j] = copper;
    52465:  149:	  state->deckCount[i]++;		
    52465:  150:	}
     7495:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    19990:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25%
        -:  155:    {
     7495:  156:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
     7495:  160:    }
        -:  161:
        -:  162:  //draw player hands
    19990:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25%
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     7495:  166:      state->handCount[i] = 0;
     7495:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
     7495:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   140000:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  177:    {
    67500:  178:      state->embargoTokens[i] = 0;
    67500:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     2500:  182:  state->outpostPlayed = 0;
     2500:  183:  state->phase = 0;
     2500:  184:  state->numActions = 1;
     2500:  185:  state->numBuys = 1;
     2500:  186:  state->playedCardCount = 0;
     2500:  187:  state->whoseTurn = 0;
     2500:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    30000:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
    12500:  193:    drawCard(state->whoseTurn, state);
    12500:  194:  }
        -:  195:
     2500:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     2500:  198:  return 0;
     2500:  199:}
        -:  200:
function shuffle called 298703 returned 100% blocks executed 93%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
   298703:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
   298703:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0%
branch  1 taken 100%
    #####:  210:    return -1;
   298703:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
 13812186:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 96%
branch  1 taken 4%
  6607390:  215:    card = floor(Random() * state->deckCount[player]);
  6607390:  216:    newDeck[newDeckPos] = state->deck[player][card];
  6607390:  217:    newDeckPos++;
 99657248:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 87%
branch  1 taken 13%
 43221234:  219:      state->deck[player][i] = state->deck[player][i+1];
 43221234:  220:    }
  6607390:  221:    state->deckCount[player]--;
        -:  222:  }
 13812186:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 96%
branch  1 taken 4%
  6607390:  224:    state->deck[player][i] = newDeck[i];
  6607390:  225:    state->deckCount[player]++;
  6607390:  226:  }
        -:  227:
   298703:  228:  return 0;
   298703:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
function buyCard called 1289517 returned 100% blocks executed 91%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
  1289517:  280:  who = state->whoseTurn;
        -:  281:
  1289517:  282:  if (state->numBuys < 1){
branch  0 taken 0%
branch  1 taken 100%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
  1289517:  286:  } else if (supplyCount(supplyPos, state) <1){
branch  0 taken 40%
branch  1 taken 60%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
   511824:  289:    return -1;
   777693:  290:  } else if (state->coins < getCost(supplyPos)){
branch  0 taken 68%
branch  1 taken 32%
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
   529191:  293:    return -1;
        -:  294:  } else {
   248502:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
   248502:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
   248502:  299:    state->coins = (state->coins) - (getCost(supplyPos));
   248502:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
   248502:  308:  return 0;
  1289517:  309:}
        -:  310:
function numHandCards called 15474204 returned 100% blocks executed 100%
        -:  311:int numHandCards(struct gameState *state) {
 15474204:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
function handCard called 27995334 returned 100% blocks executed 100%
        -:  315:int handCard(int handPos, struct gameState *state) {
 27995334:  316:  int currentPlayer = whoseTurn(state);
 27995334:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 1538019 returned 100% blocks executed 100%
        -:  320:int supplyCount(int card, struct gameState *state) {
  1538019:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 5151 returned 100% blocks executed 100%
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
     5151:  326:  int count = 0;
        -:  327:
   160638:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 94%
branch  1 taken 6%
        -:  329:    {
    84101:  330:      if (state->deck[player][i] == card) count++;
branch  0 taken 12%
branch  1 taken 88%
    75168:  331:    }
        -:  332:
    26642:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 61%
branch  1 taken 39%
        -:  334:    {
     9101:  335:      if (state->hand[player][i] == card) count++;
branch  0 taken 11%
branch  1 taken 89%
     8170:  336:    }
        -:  337:
   328496:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 97%
branch  1 taken 3%
        -:  339:    {
   177825:  340:      if (state->discard[player][i] == card) count++;
branch  0 taken 12%
branch  1 taken 88%
   159097:  341:    }
        -:  342:
     5151:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 46048572 returned 100% blocks executed 100%
        -:  346:int whoseTurn(struct gameState *state) {
 46048572:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 1289517 returned 100% blocks executed 100%
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
  1289517:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
 15474204:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 83%
branch  1 taken 17%
  6447585:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
  6447585:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
  6447585:  359:  }
  1289517:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
  1289517:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 65%
branch  1 taken 35%
   842169:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
   842169:  365:  }
        -:  366:  else{
   447348:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
  1289517:  370:  state->outpostPlayed = 0;
  1289517:  371:  state->phase = 0;
  1289517:  372:  state->numActions = 1;
  1289517:  373:  state->coins = 0;
  1289517:  374:  state->numBuys = 1;
  1289517:  375:  state->playedCardCount = 0;
  1289517:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
 15474204:  380:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17%
  6447585:  381:    drawCard(state->whoseTurn, state);//Draw a card
  6447585:  382:  }
        -:  383:
        -:  384:  //Update money
  1289517:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
  1289517:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 1292017 returned 100% blocks executed 92%
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
  1292017:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 0%
branch  1 taken 100%
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
  1292017:  401:  j = 0;
 67184884:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  403:    {
 32300425:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 3%
branch  1 taken 97%
        -:  405:	{
   923624:  406:	  j++;
   923624:  407:	}
 32300425:  408:    }
  1292017:  409:  if ( j >= 3)
branch  0 taken 1%
branch  1 taken 99%
        -:  410:    {
     2500:  411:      return 1;
        -:  412:    }
        -:  413:
  1289517:  414:  return 0;
  1292017:  415:}
        -:  416:
function scoreFor called 7495 returned 100% blocks executed 100%
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
     7495:  420:  int score = 0;
        -:  421:  //score from hand
    39990:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 63%
branch  1 taken 37%
        -:  423:    {
    14111:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 13%
branch  1 taken 87%
    14483:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 16%
branch  1 taken 84%
    12591:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 1%
branch  1 taken 99%
    12501:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 1%
branch  1 taken 99%
    12897:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 3%
branch  1 taken 97%
    12683:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 1%
branch  1 taken 99%
    12500:  430:    }
        -:  431:
        -:  432:  //score from discard
   342284:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  434:    {
   184647:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 13%
branch  1 taken 87%
   188007:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 15%
branch  1 taken 85%
   165136:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 1%
branch  1 taken 99%
   163658:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 1%
branch  1 taken 99%
   169078:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 3%
branch  1 taken 97%
   166097:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 1%
branch  1 taken 99%
   163647:  441:    }
        -:  442:
        -:  443:  //score from deck
   342284:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  445:    {
   184401:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 13%
branch  1 taken 87%
   188443:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 15%
branch  1 taken 85%
   165152:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 1%
branch  1 taken 99%
   163656:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 1%
branch  1 taken 99%
   168803:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 3%
branch  1 taken 97%
   166165:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 2%
branch  1 taken 98%
   163647:  452:    }
        -:  453:
     7495:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 6460085 returned 100% blocks executed 91%
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
  6460085:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 5%
branch  1 taken 95%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
 13647296:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 96%
branch  1 taken 4%
  6532440:  534:      state->deck[player][i] = state->discard[player][i];
  6532440:  535:      state->discard[player][i] = -1;
  6532440:  536:    }
        -:  537:
   291208:  538:    state->deckCount[player] = state->discardCount[player];
   291208:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
   291208:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
   291208:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
   291208:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
   291208:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
   291208:  559:    if (deckCounter == 0)
branch  0 taken 0%
branch  1 taken 100%
    #####:  560:      return -1;
        -:  561:
   291208:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
   291208:  563:    state->deckCount[player]--;
   291208:  564:    state->handCount[player]++;//Increment hand count
   291208:  565:  }
        -:  566:
        -:  567:  else{
  6168877:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
  6168877:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
  6168877:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  6168877:  576:    state->deckCount[player]--;
  6168877:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
  6460085:  580:  return 0;
  6460085:  581:}
        -:  582:
function getCost called 1026195 returned 100% blocks executed 96%
        -:  583:int getCost(int cardNumber)
        -:  584:{
  1026195:  585:  switch( cardNumber ) 
branch  0 taken 8%
branch  1 taken 6%
branch  2 taken 5%
branch  3 taken 5%
branch  4 taken 9%
branch  5 taken 7%
branch  6 taken 5%
branch  7 taken 2%
branch  8 taken 3%
branch  9 taken 3%
branch 10 taken 3%
branch 11 taken 2%
branch 12 taken 3%
branch 13 taken 3%
branch 14 taken 3%
branch 15 taken 3%
branch 16 taken 3%
branch 17 taken 3%
branch 18 taken 3%
branch 19 taken 3%
branch 20 taken 3%
branch 21 taken 3%
branch 22 taken 3%
branch 23 taken 2%
branch 24 taken 3%
branch 25 taken 3%
branch 26 taken 3%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
    83034:  588:      return 0;
        -:  589:    case estate:
    59238:  590:      return 2;
        -:  591:    case duchy:
    50720:  592:      return 5;
        -:  593:    case province:
    47947:  594:      return 8;
        -:  595:    case copper:
    95746:  596:      return 0;
        -:  597:    case silver:
    70404:  598:      return 3;
        -:  599:    case gold:
    48342:  600:      return 6;
        -:  601:    case adventurer:
    23973:  602:      return 6;
        -:  603:    case council_room:
    25680:  604:      return 5;
        -:  605:    case feast:
    28924:  606:      return 4;
        -:  607:    case gardens:
    28533:  608:      return 4;
        -:  609:    case mine:
    25083:  610:      return 5;
        -:  611:    case remodel:
    29577:  612:      return 4;
        -:  613:    case smithy:
    28961:  614:      return 4;
        -:  615:    case village:
    31202:  616:      return 3;
        -:  617:    case baron:
    29806:  618:      return 4;
        -:  619:    case great_hall:
    33236:  620:      return 3;
        -:  621:    case minion:
    25732:  622:      return 5;
        -:  623:    case steward:
    31688:  624:      return 3;
        -:  625:    case tribute:
    25816:  626:      return 5;
        -:  627:    case ambassador:
    32023:  628:      return 3;
        -:  629:    case cutpurse:
    30233:  630:      return 4;
        -:  631:    case embargo: 
    27690:  632:      return 2;
        -:  633:    case outpost:
    24811:  634:      return 5;
        -:  635:    case salvager:
    30202:  636:      return 4;
        -:  637:    case sea_hag:
    28570:  638:      return 4;
        -:  639:    case treasure_map:
    29024:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
  1026195:  644:}
        -:  645:
function cardEffect called 0 returned 0% blocks executed 0%
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        -:  658:  //int drawntreasure=0;
        -:  659:  //int cardDrawn;
        -:  660:  //int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  662:    nextPlayer = 0;
    #####:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  668:    {
        -:  669:	    case adventurer:
    #####:  670:		return f_adventurer(state,currentPlayer);
        -:  671:	    case council_room:
    #####:  672:		return f_concil_room(state,currentPlayer,handPos);	
        -:  673:
        -:  674:    case feast:
        -:  675:      //gain card with cost up to 5
        -:  676:      //Backup hand
    #####:  677:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  678:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  679:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  680:      }
        -:  681:      //Backup hand
        -:  682:
        -:  683:      //Update Coins for Buy
    #####:  684:      updateCoins(currentPlayer, state, 5);
    #####:  685:      x = 1;//Condition to loop on
    #####:  686:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  687:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  688:	  if (DEBUG)
        -:  689:	    printf("None of that card left, sorry!\n");
        -:  690:
        -:  691:	  if (DEBUG){
        -:  692:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  693:	  }
    #####:  694:	}
    #####:  695:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  696:	  printf("That card is too expensive!\n");
        -:  697:
        -:  698:	  if (DEBUG){
        -:  699:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  700:	  }
    #####:  701:	}
        -:  702:	else{
        -:  703:
        -:  704:	  if (DEBUG){
        -:  705:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  706:	  }
        -:  707:
    #####:  708:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  709:	  x = 0;//No more buying cards
        -:  710:
        -:  711:	  if (DEBUG){
        -:  712:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  713:	  }
        -:  714:
        -:  715:	}
        -:  716:      }     
        -:  717:
        -:  718:      //Reset Hand
    #####:  719:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  720:	state->hand[currentPlayer][i] = temphand[i];
    #####:  721:	temphand[i] = -1;
    #####:  722:      }
        -:  723:      //Reset Hand
        -:  724:      			
    #####:  725:      return 0;
        -:  726:			
        -:  727:    case gardens:
    #####:  728:      return -1;
        -:  729:			
        -:  730:    case mine:
    #####:  731:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  732:
    #####:  733:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  734:	{
    #####:  735:	  return -1;
        -:  736:	}
        -:  737:		
    #####:  738:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  739:	{
    #####:  740:	  return -1;
        -:  741:	}
        -:  742:
    #####:  743:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  744:	{
    #####:  745:	  return -1;
        -:  746:	}
        -:  747:
    #####:  748:      gainCard(choice2, state, 2, currentPlayer);
        -:  749:
        -:  750:      //discard card from hand
    #####:  751:      discardCard(handPos, currentPlayer, state, 0);
        -:  752:
        -:  753:      //discard trashed card
    #####:  754:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  755:	{
    #####:  756:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  757:	    {
    #####:  758:	      discardCard(i, currentPlayer, state, 0);			
    #####:  759:	      break;
        -:  760:	    }
    #####:  761:	}
        -:  762:			
    #####:  763:      return 0;
        -:  764:    case remodel:
    #####:  765:	return f_remodel(state,currentPlayer,choice1,choice2,handPos); 
        -:  766:    case smithy:
    #####:  767:	return f_smithy(state,currentPlayer,handPos);
        -:  768:    case village:
    #####:  769:	return f_village(state,currentPlayer,handPos);	
        -:  770:	
        -:  771:    case baron:
    #####:  772:      state->numBuys++;//Increase buys by 1!
    #####:  773:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  774:	int p = 0;//Iterator for hand!
    #####:  775:	int card_not_discarded = 1;//Flag for discard set!
    #####:  776:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  777:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  778:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  779:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  780:	    state->discardCount[currentPlayer]++;
    #####:  781:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  782:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  783:	    }
    #####:  784:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  785:	    state->handCount[currentPlayer]--;
    #####:  786:	    card_not_discarded = 0;//Exit the loop
    #####:  787:	  }
    #####:  788:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  789:	    if(DEBUG) {
        -:  790:	      printf("No estate cards in your hand, invalid choice\n");
        -:  791:	      printf("Must gain an estate if there are any\n");
        -:  792:	    }
    #####:  793:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  794:	      gainCard(estate, state, 0, currentPlayer);
    #####:  795:	      state->supplyCount[estate]--;//Decrement estates
    #####:  796:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  797:		isGameOver(state);
    #####:  798:	      }
    #####:  799:	    }
    #####:  800:	    card_not_discarded = 0;//Exit the loop
    #####:  801:	  }
        -:  802:			    
        -:  803:	  else{
    #####:  804:	    p++;//Next card
        -:  805:	  }
        -:  806:	}
    #####:  807:      }
        -:  808:			    
        -:  809:      else{
    #####:  810:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  811:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  812:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  813:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  814:	    isGameOver(state);
    #####:  815:	  }
    #####:  816:	}
        -:  817:      }
        -:  818:	    
        -:  819:      
    #####:  820:      return 0;
        -:  821:		
        -:  822:    case great_hall:
        -:  823:
        -:  824:      
        -:  825:      //+1 Card
    #####:  826:      drawCard(currentPlayer, state);
        -:  827:			
        -:  828:      //+1 Actions
    #####:  829:      state->numActions++;
        -:  830:			
        -:  831:      //discard card from hand
    #####:  832:      discardCard(handPos, currentPlayer, state, 0);
    #####:  833:      return 0;
        -:  834:		
        -:  835:    case minion:
        -:  836:      //+1 action
    #####:  837:      state->numActions++;
        -:  838:			
        -:  839:      //discard card from hand
    #####:  840:      discardCard(handPos, currentPlayer, state, 0);
        -:  841:			
    #####:  842:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  843:	{
    #####:  844:	  state->coins = state->coins + 2;
    #####:  845:	}
        -:  846:			
    #####:  847:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  848:	{
        -:  849:	  //discard hand
    #####:  850:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  851:	    {
    #####:  852:	      discardCard(handPos, currentPlayer, state, 0);
        -:  853:	    }
        -:  854:				
        -:  855:	  //draw 4
    #####:  856:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  857:	    {
    #####:  858:	      drawCard(currentPlayer, state);
    #####:  859:	    }
        -:  860:				
        -:  861:	  //other players discard hand and redraw if hand size > 4
    #####:  862:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  863:	    {
    #####:  864:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  865:		{
    #####:  866:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  867:		    {
        -:  868:		      //discard hand
    #####:  869:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  870:			{
    #####:  871:			  discardCard(handPos, i, state, 0);
        -:  872:			}
        -:  873:							
        -:  874:		      //draw 4
    #####:  875:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  876:			{
    #####:  877:			  drawCard(i, state);
    #####:  878:			}
    #####:  879:		    }
    #####:  880:		}
    #####:  881:	    }
        -:  882:				
    #####:  883:	}
    #####:  884:      return 0;
        -:  885:		
        -:  886:    case steward:
    #####:  887:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  888:	{
        -:  889:	  //+2 cards
    #####:  890:	  drawCard(currentPlayer, state);
    #####:  891:	  drawCard(currentPlayer, state);
    #####:  892:	}
    #####:  893:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  894:	{
        -:  895:	  //+2 coins
    #####:  896:	  state->coins = state->coins + 2;
    #####:  897:	}
        -:  898:      else
        -:  899:	{
        -:  900:	  //trash 2 cards in hand
    #####:  901:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  902:	  discardCard(choice3, currentPlayer, state, 1);
        -:  903:	}
        -:  904:			
        -:  905:      //discard card from hand
    #####:  906:      discardCard(handPos, currentPlayer, state, 0);
    #####:  907:      return 0;
        -:  908:		
        -:  909:    case tribute:
    #####:  910:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  911:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  912:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  913:	  state->deckCount[nextPlayer]--;
    #####:  914:	}
    #####:  915:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  916:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  917:	  state->discardCount[nextPlayer]--;
    #####:  918:	}
        -:  919:	else{
        -:  920:	  //No Card to Reveal
        -:  921:	  if (DEBUG){
        -:  922:	    printf("No cards to reveal\n");
        -:  923:	  }
        -:  924:	}
    #####:  925:      }
        -:  926:	    
        -:  927:      else{
    #####:  928:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  929:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  930:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  931:	    state->deckCount[nextPlayer]++;
    #####:  932:	    state->discard[nextPlayer][i] = -1;
    #####:  933:	    state->discardCount[nextPlayer]--;
    #####:  934:	  }
        -:  935:			    
    #####:  936:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  937:	} 
    #####:  938:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  939:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  940:	state->deckCount[nextPlayer]--;
    #####:  941:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  942:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  943:	state->deckCount[nextPlayer]--;
        -:  944:      }    
        -:  945:		       
    #####:  946:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  947:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  948:	state->playedCardCount++;
    #####:  949:	tributeRevealedCards[1] = -1;
    #####:  950:      }
        -:  951:
    #####:  952:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  953:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  954:	  state->coins += 2;
    #####:  955:	}
        -:  956:		    
    #####:  957:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  958:	  drawCard(currentPlayer, state);
    #####:  959:	  drawCard(currentPlayer, state);
    #####:  960:	}
        -:  961:	else{//Action Card
    #####:  962:	  state->numActions = state->numActions + 2;
        -:  963:	}
    #####:  964:      }
        -:  965:	    
    #####:  966:      return 0;
        -:  967:		
        -:  968:    case ambassador:
    #####:  969:      j = 0;		//used to check if player has enough cards to discard
        -:  970:
    #####:  971:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  972:	{
    #####:  973:	  return -1;				
        -:  974:	}
        -:  975:
    #####:  976:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  977:	{
    #####:  978:	  return -1;
        -:  979:	}
        -:  980:
    #####:  981:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  982:	{
    #####:  983:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  984:	    {
    #####:  985:	      j++;
    #####:  986:	    }
    #####:  987:	}
    #####:  988:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  989:	{
    #####:  990:	  return -1;				
        -:  991:	}
        -:  992:
        -:  993:      if (DEBUG) 
        -:  994:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  995:
        -:  996:      //increase supply count for choosen card by amount being discarded
    #####:  997:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  998:			
        -:  999:      //each other player gains a copy of revealed card
    #####: 1000:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1001:	{
    #####: 1002:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1003:	    {
    #####: 1004:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1005:	    }
    #####: 1006:	}
        -: 1007:
        -: 1008:      //discard played card from hand
    #####: 1009:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1010:
        -: 1011:      //trash copies of cards returned to supply
    #####: 1012:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1013:	{
    #####: 1014:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1015:	    {
    #####: 1016:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1017:		{
    #####: 1018:		  discardCard(i, currentPlayer, state, 1);
    #####: 1019:		  break;
        -: 1020:		}
    #####: 1021:	    }
    #####: 1022:	}			
        -: 1023:
    #####: 1024:      return 0;
        -: 1025:		
        -: 1026:    case cutpurse:
        -: 1027:
    #####: 1028:      updateCoins(currentPlayer, state, 2);
    #####: 1029:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1030:	{
    #####: 1031:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1032:	    {
    #####: 1033:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1034:		{
    #####: 1035:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1036:		    {
    #####: 1037:		      discardCard(j, i, state, 0);
    #####: 1038:		      break;
        -: 1039:		    }
    #####: 1040:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1041:		    {
    #####: 1042:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1043:			{
        -: 1044:			  if (DEBUG)
        -: 1045:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1046:			}	
    #####: 1047:		      break;
        -: 1048:		    }		
    #####: 1049:		}
        -: 1050:					
    #####: 1051:	    }
        -: 1052:				
    #####: 1053:	}				
        -: 1054:
        -: 1055:      //discard played card from hand
    #####: 1056:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1057:
    #####: 1058:      return 0;
        -: 1059:
        -: 1060:		
        -: 1061:    case embargo: 
        -: 1062:      //+2 Coins
    #####: 1063:      state->coins = state->coins + 2;
        -: 1064:			
        -: 1065:      //see if selected pile is in play
    #####: 1066:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1067:	{
    #####: 1068:	  return -1;
        -: 1069:	}
        -: 1070:			
        -: 1071:      //add embargo token to selected supply pile
    #####: 1072:      state->embargoTokens[choice1]++;
        -: 1073:			
        -: 1074:      //trash card
    #####: 1075:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1076:      return 0;
        -: 1077:		
        -: 1078:    case outpost:
        -: 1079:      //set outpost flag
    #####: 1080:      state->outpostPlayed++;
        -: 1081:			
        -: 1082:      //discard card
    #####: 1083:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1084:      return 0;
        -: 1085:		
        -: 1086:    case salvager:
        -: 1087:      //+1 buy
    #####: 1088:      state->numBuys++;
        -: 1089:			
    #####: 1090:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1091:	{
        -: 1092:	  //gain coins equal to trashed card
    #####: 1093:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1094:	  //trash card
    #####: 1095:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1096:	}
        -: 1097:			
        -: 1098:      //discard card
    #####: 1099:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1100:      return 0;
        -: 1101:		
        -: 1102:    case sea_hag:
    #####: 1103:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1104:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1105:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1106:	  state->discardCount[i]++;
    #####: 1107:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1108:	}
    #####: 1109:      }
    #####: 1110:      return 0;
        -: 1111:		
        -: 1112:    case treasure_map:
        -: 1113:      //search hand for another treasure_map
    #####: 1114:      index = -1;
    #####: 1115:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1116:	{
    #####: 1117:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1118:	    {
    #####: 1119:	      index = i;
    #####: 1120:	      break;
        -: 1121:	    }
    #####: 1122:	}
    #####: 1123:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1124:	{
        -: 1125:	  //trash both treasure cards
    #####: 1126:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1127:	  discardCard(index, currentPlayer, state, 1);
        -: 1128:
        -: 1129:	  //gain 4 Gold cards
    #####: 1130:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1131:	    {
    #####: 1132:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1133:	    }
        -: 1134:				
        -: 1135:	  //return success
    #####: 1136:	  return 1;
        -: 1137:	}
        -: 1138:			
        -: 1139:      //no second treasure_map found in hand
    #####: 1140:      return -1;
        -: 1141:    }
        -: 1142:	
    #####: 1143:  return -1;
    #####: 1144:}
        -: 1145:
function discardCard called 0 returned 0% blocks executed 0%
        -: 1146:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1147:{
        -: 1148:	
        -: 1149:  //if card is not trashed, added to Played pile 
    #####: 1150:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1151:    {
        -: 1152:      //add card to played pile
    #####: 1153:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1154:      state->playedCardCount++;
    #####: 1155:    }
        -: 1156:	
        -: 1157:  //set played card to -1
    #####: 1158:  state->hand[currentPlayer][handPos] = -1;
        -: 1159:	
        -: 1160:  //remove card from player's hand
    #####: 1161:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1162:    {
        -: 1163:      //reduce number of cards in hand
    #####: 1164:      state->handCount[currentPlayer]--;
    #####: 1165:    }
    #####: 1166:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1167:    {
        -: 1168:      //reduce number of cards in hand
    #####: 1169:      state->handCount[currentPlayer]--;
    #####: 1170:    }
        -: 1171:  else 	
        -: 1172:    {
        -: 1173:      //replace discarded card with last card in hand
    #####: 1174:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1175:      //set last card to -1
    #####: 1176:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1177:      //reduce number of cards in hand
    #####: 1178:      state->handCount[currentPlayer]--;
        -: 1179:    }
        -: 1180:	
    #####: 1181:  return 0;
        -: 1182:}
        -: 1183:
function gainCard called 248502 returned 100% blocks executed 72%
        -: 1184:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1185:{
        -: 1186:  //Note: supplyPos is enum of choosen card
        -: 1187:	
        -: 1188:  //check if supply pile is empty (0) or card is not used in game (-1)
   248502: 1189:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 0%
branch  1 taken 100%
        -: 1190:    {
    #####: 1191:      return -1;
        -: 1192:    }
        -: 1193:	
        -: 1194:  //added card for [whoseTurn] current player:
        -: 1195:  // toFlag = 0 : add to discard
        -: 1196:  // toFlag = 1 : add to deck
        -: 1197:  // toFlag = 2 : add to hand
        -: 1198:
   248502: 1199:  if (toFlag == 1)
branch  0 taken 0%
branch  1 taken 100%
        -: 1200:    {
    #####: 1201:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1202:      state->deckCount[player]++;
    #####: 1203:    }
   248502: 1204:  else if (toFlag == 2)
branch  0 taken 0%
branch  1 taken 100%
        -: 1205:    {
    #####: 1206:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1207:      state->handCount[player]++;
    #####: 1208:    }
        -: 1209:  else
        -: 1210:    {
   248502: 1211:      state->discard[player][ state->discardCount[player] ] = supplyPos;
   248502: 1212:      state->discardCount[player]++;
        -: 1213:    }
        -: 1214:	
        -: 1215:  //decrease number in supply pile
   248502: 1216:  state->supplyCount[supplyPos]--;
        -: 1217:	 
   248502: 1218:  return 0;
   248502: 1219:}
        -: 1220:
function updateCoins called 1292017 returned 100% blocks executed 100%
        -: 1221:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1222:{
        -: 1223:  int i;
        -: 1224:	
        -: 1225:  //reset coin count
  1292017: 1226:  state->coins = 0;
        -: 1227:
        -: 1228:  //add coins for each Treasure card in player's hand
 15504204: 1229:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1230:    {
  6460085: 1231:      if (state->hand[player][i] == copper)
branch  0 taken 39%
branch  1 taken 61%
        -: 1232:	{
  2511424: 1233:	  state->coins += 1;
  2511424: 1234:	}
  3948661: 1235:      else if (state->hand[player][i] == silver)
branch  0 taken 8%
branch  1 taken 92%
        -: 1236:	{
   330914: 1237:	  state->coins += 2;
   330914: 1238:	}
  3617747: 1239:      else if (state->hand[player][i] == gold)
branch  0 taken 1%
branch  1 taken 99%
        -: 1240:	{
     6975: 1241:	  state->coins += 3;
     6975: 1242:	}	
  6460085: 1243:    }	
        -: 1244:
        -: 1245:  //add bonus
  1292017: 1246:  state->coins += bonus;
        -: 1247:
  1292017: 1248:  return 0;
        -: 1249:}
        -: 1250:
        -: 1251:
        -: 1252://end of dominion.c
function f_adventurer called 0 returned 0% blocks executed 0%
        -: 1253:int f_adventurer (struct gameState *state, int currentPlayer){
    #####: 1254:	int drawntreasure = 0;
    #####: 1255:	int z = 1;
        -: 1256:	int temphand[MAX_HAND];
        -: 1257:	int cardDrawn;
        -: 1258:
    #####: 1259:	   while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####: 1260:		             if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####: 1261:				                 shuffle(currentPlayer, state);
    #####: 1262:						           }
    #####: 1263:			               drawCard(currentPlayer, state);
    #####: 1264:				                 cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1265:						           if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1266:								               drawntreasure++;
        -: 1267:							             else{
    #####: 1268:									                 temphand[z]=cardDrawn;
    #####: 1269:											             state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1270:												                 z++;
        -: 1271:														           }
        -: 1272:								             }
    #####: 1273:	           while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####: 1274:			             state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1275:				               z=z-1;
        -: 1276:					              }
    #####: 1277:		          return 0;
        -: 1278:}
        -: 1279:
        -: 1280:
        -: 1281:						  
        -: 1282:
function f_concil_room called 0 returned 0% blocks executed 0%
        -: 1283:int f_concil_room(struct gameState *state, int currentPlayer, int handpos){
        -: 1284:	    int i;
        -: 1285:	            
    #####: 1286:	        for(i=0; i<4; i++)
branch  0 never executed
branch  1 never executed
    #####: 1287:			        drawCard(currentPlayer, state);
        -: 1288:
    #####: 1289:		    state->numBuys++;
        -: 1290:
    #####: 1291:		        for(i=0; i<state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
    #####: 1292:				        if(i != currentPlayer)
branch  0 never executed
branch  1 never executed
    #####: 1293:						            drawCard(i, state);
        -: 1294:
    #####: 1295:			    discardCard(handpos, currentPlayer, state, 0); 
        -: 1296:
    #####: 1297:			        return 0;
        -: 1298:}
function f_remodel called 0 returned 0% blocks executed 0%
        -: 1299:int f_remodel(struct gameState *state, int currentPlayer, int choice1, int choice2, int handpos){
        -: 1300:		int j;
        -: 1301:			int i;
    #####: 1302:			    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1303:			      
    #####: 1304:			            if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -: 1305:					              {
    #####: 1306:							                  return -1;
        -: 1307:									            }
        -: 1308:				      
    #####: 1309:				            gainCard(choice2, state, 0, currentPlayer);
        -: 1310:					      
        -: 1311:					            //discard card from hand
    #####: 1312:					            discardCard(handpos, currentPlayer, state, 0);
        -: 1313:						      
        -: 1314:						            //discard trashed card
    #####: 1315:						            for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1316:								              {
    #####: 1317:										                  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1318:													                {
    #####: 1319:												                discardCard(i, currentPlayer, state, 0);
    #####: 1320:															              break;
        -: 1321:																			                    }
    #####: 1322:												           }
        -: 1323:							      
        -: 1324:							     
    #####: 1325:							            return 0;
    #####: 1326:								        }
        -: 1327:
function f_smithy called 0 returned 0% blocks executed 0%
        -: 1328:int f_smithy(struct gameState *state, int currentPlayer, int handpos){
        -: 1329:		int i;
        -: 1330:			//+3 Cards
    #####: 1331:		        for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -: 1332:				         {
    #####: 1333:						             drawCard(currentPlayer, state);
    #####: 1334:							               }
        -: 1335:			  
        -: 1336:			        //discard card from hand
    #####: 1337:			        discardCard(handpos, currentPlayer, state, 0);
    #####: 1338:				        return 0;
        -: 1339:}
        -: 1340:
function f_village called 0 returned 0% blocks executed 0%
        -: 1341:int f_village(struct gameState *state, int currentPlayer, int handpos){
        -: 1342:
        -: 1343:
    #####: 1344:			        drawCard(currentPlayer, state); 
        -: 1345:				        //+2 Actions
    #####: 1346:				        state->numActions = state->numActions + 3;
        -: 1347:					 
        -: 1348:					        //discard played card from hand
    #####: 1349:					        discardCard(handpos, currentPlayer, state, 0);
    #####: 1350:						        return 0;
        -: 1351:							 
        -: 1352:}
        -: 1353:
        -: 1354:
        -: 1355:
        -: 1356:
        -: 1357:
        -: 1358:
        -: 1359:		       
        -: 1360:
        -: 1361:
        -: 1362:
        -: 1363:
        -: 1364:
