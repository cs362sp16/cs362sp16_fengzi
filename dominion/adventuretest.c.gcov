        -:    0:Source:adventuretest.c
        -:    0:Graph:adventuretest.gcno
        -:    0:Data:adventuretest.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/***********************************
        -:    2:CS 362 Assignment 3 
        -:    3:Zixuan Feng
        -:    4:10/5/2016
        -:    5:Village test
        -:    6:***********************************/
        -:    7:#include "dominion.h"
        -:    8:#include "rngs.h"
        -:    9:#include <stdio.h>
        -:   10:#include <math.h>
        -:   11:#include <stdlib.h>
        -:   12:#include <time.h>
        -:   13:#define NUM_TESTS 50
        -:   14:
        -:   15:void my_assert(int a, int b, char *c)
        -:   16:{
       50:   17:	if(a != b)
        -:   18:	{
    #####:   19:		printf("Random test fail %s\n", c);
    #####:   20:	}
       50:   21:}
        -:   22:
        -:   23:int main(){
        1:   24:	int x[10] = {adventurer, gardens, embargo, sea_hag, tribute, smithy,
        -:   25:		village, minion, mine, cutpurse, 
        -:   26:     };
        -:   27:
        1:   28:     int y, z,num = 0, players,handCount, deckCount,randSeed;
        -:   29:
        -:   30:	struct gameState state;
        1:   31:	srand(time(NULL));
        -:   32:
        1:   33:	printf("*********** adventurer test **********\n");
        -:   34:
      102:   35:	for (y = 0; y < NUM_TESTS; y++) {
       50:   36:		players=4;
       50:   37:		randSeed=rand();
       50:   38:		initializeGame(players, x, randSeed, &state);
        -:   39:
       50:   40:		state.deckCount[num] = rand() % MAX_DECK; //Pick random deck size out of MAX DECK size
       50:   41:		state.discardCount[num] = rand() % MAX_DECK;
       50:   42:		state.handCount[num] = rand() % MAX_HAND;
        -:   43:
       50:   44:		handCount = state.handCount[num];
       50:   45:		deckCount = state.deckCount[num];
        -:   46:
       50:   47:		if (randSeed % 3 == 0) {
        -:   48:
       19:   49:			state.deckCount[num] = 0;
       19:   50:		}
        -:   51:
    15210:   52:		for (z = 0; z < state.deckCount[num]; z++){
     7555:   53:            state.deck[num][z] = rand() % treasure_map;
     7555:   54:        }
        -:   55:
    26450:   56:         for (z = 0; z < state.discardCount[num]; z++){
    13175:   57:            state.discard[num][z] = rand() % treasure_map;
    13175:   58:        }
    25718:   59:		for (z = 0; z < state.handCount[num]; z++){
    12809:   60:            state.hand[num][z] = rand() % treasure_map;
    12809:   61:        }
        -:   62:
       50:   63:        	cardEffect(adventurer, 0, 0, 0, &state);
       50:   64:        	handCount=handCount+2;
        -:   65:
       50:   66:        			my_assert(handCount, state.handCount[num], "handCount");
       50:   67:        		}
        1:   68:printf("*********finished***********\n");
        1:   69:return 0; 
        -:   70:}
